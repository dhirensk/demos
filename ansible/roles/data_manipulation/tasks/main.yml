---
# tasks file for data_manipulation

- name: "Running playbook in {{ mode| upper }} mode for {{ env_name}} environment."
  debug:
    msg: ""
    verbosity: 2


- name: fail if required env_name is not provided as extra vars
  fail:
    msg: "env_name extra-var not supplied or does match from {{ dwx_envs }}"
  when: (env_name is not defined) or (env_name not in dwx_envs and env_name is defined)


- name: get list of dwx envs
  command: cdp dw list-clusters
  register: envs
  changed_when: false


- name: set cluster_id
  set_fact:
    cluster_id: "{{ envs.stdout | from_json | json_query(query) | first }}"
  vars:
    query: "clusters[?name=='{{ env_name }}'].id"


- name: get list of DB Catalogs for the environment
  command: cdp dw list-dbcs --cluster-id "{{ cluster_id }}" --output json
  register: dbcs
  changed_when: false


- name: set dbc_id
  set_fact:
    dbc_id: "{{ dbcs.stdout | from_json | json_query(query) | first }}"
  vars:
    query: "dbcs[?name=='default'].id"

# this list is used to accumulate all VWs id:name details which are going to be created.
- name: Create VW creation list
  set_fact: 
    vw_created : "{{ vw_created | default([]) }}"


- name: get list of all existing VWs in the cluster
  command: cdp dw  list-vws --cluster-id {{ cluster_id }}
  register: all_existing_vws_list_command
  changed_when: false

- name: Initialize existing vws list to an empty list.
  set_fact: 
    all_existing_vws_list : "{{ all_existing_vws_list | default([]) }}"

- name: set id and name dict of existing VWs
  set_fact:
    all_existing_vws_list: "{{ all_existing_vws_list_command.stdout | from_json | json_query('vws[*].{id: id, name: name}') }}"
  when: list_vws | length > 0 
  vars:
    list_vws: "{{ all_existing_vws_list_command.stdout | from_json | json_query('vws')}}"

# This task shows existing list of VWs captured in all_existing_vws_list fact.
# e.g.
# msg": [
#         {
#             "id": "compute-1676359545-dwr2", 
#             "name": "tst-hive"
#         }, 
#         {
#             "id": "compute-1674756625-m2wl", 
#             "name": "tst-hive-compactor"
#         },
#         {
#             "id": "impala-1676284063-qc47", 
#             "name": "tst-impala"
#         }
# ]


###########################################################
################# HIVE COMPACTOR VW CREATE#################
###########################################################

- name: get list of existing hive compactor in the cluster
  command: cdp dw  list-vws --cluster-id {{ cluster_id }} --filter {{ filter | to_json | quote }}
  vars:
    filter: 
      vwType: hive
      compactor: true
  register: list_hive_compactor_command
  changed_when: false

- name: set id and name dict of existing hive compactor
  set_fact:
    existing_hive_compactor_list: "{{ list_hive_compactor_command.stdout | from_json | json_query('vws[*].{id: id, name: name}') }}"
  when: list_vws | length > 0 
  vars:
    list_vws: "{{ list_hive_compactor_command.stdout | from_json | json_query('vws')}}"

# Make sure each environment has one Hive VW defined as compactor: true in defaults/main.yml
- name: Check if compactor Hive VW is defined in yaml configuration.
  fail:
    msg: "One of the Hive VWs should be defined as Compactor. Found: {{ compactor_found | length }}"
  when: (compactor_found | length) != 1
  vars:
    compactor_found: "{{ dwx_envs[env_name] | dict2items | json_query('[?value.compactor]') }}"


- name: Create Hive Compactor when no existing compactor found
  include_tasks: create.yml
  loop: "{{ dwx_envs[env_name] | to_json| from_json| dict2items | json_query('[?value.compactor && contains(value.vwType,`hive`)]') }}"
  when: 
    - existing_hive_compactor_list is not defined
    - not dwx_envs[env_name][vw_default_config_item.key]['skip']
  loop_control:
    loop_var: vw_default_config_item


#####################################################
############### HIVE/IMPALA VW CREATE ###############
#####################################################

- name: get list of existing hive/Impala VWs in the cluster (compactor:false)
  command: cdp dw  list-vws --cluster-id {{ cluster_id }} --filter {{ filter | to_json | quote }}
  vars:
    filter: 
      compactor: false
  register: list_vws_command
  changed_when: false

# this list will be used to update VW if autoscaling/applicationConfigs differences are detected
- name: set id and name dict of existing Hive/Impala VWs 
  set_fact:
    existing_vws_list: "{{ list_vws_command.stdout | from_json | json_query('vws[*].{id: id, name: name}') }}"
  when: list_vws | length > 0 
  vars:
    list_vws: "{{ list_vws_command.stdout | from_json | json_query('vws')}}"

# ansible requires use of to_json| from_json before converting dict to list when json_query involves use of contains() filter for proper parsing.
- name: Create Hive(non-compactor)/Impala VWs
  include_tasks: create.yml
  loop: "{{ dwx_envs[env_name] | to_json| from_json | dict2items | json_query(query) }}"
  when: ((existing_vws_list is defined) and (vw_default_config_item.key not in (existing_vws_list | json_query('[].name'))) and (not dwx_envs[env_name][vw_default_config_item.key]['skip'])) or
        ((existing_vws_list is not defined) and (not dwx_envs[env_name][vw_default_config_item.key]['skip']))
  vars:
    query: "[?!(value.compactor) || contains(value.vwType,'impala')]"
  loop_control:
    loop_var: vw_default_config_item


# Combine newly created VWs and existing VWs list before updating
- name: Combine newly created VWs and existing VWs for update
  set_fact:
    combined_vw_list: "{{ all_existing_vws_list + vw_created}}"


# Update operation requires vw_id of the existing VWs. We create a prepared json_query filter with extracted vw_id to each loop item
- name: Update all existing VWs
  include_tasks: update.yml
  loop: "{{ dwx_envs[env_name] | to_json| from_json | dict2items }}"
  when: (vw_default_config_item.key in (combined_vw_list | json_query('[].name'))) and (not dwx_envs[env_name][vw_default_config_item.key]['skip'])
  vars:
    vw_list: "{{ combined_vw_list }}"
    vw_id_query: "[?name == '{{ vw_default_config_item.key }}'].id"
  loop_control:
    loop_var: vw_default_config_item

